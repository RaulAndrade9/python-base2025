-m
rodar um módulo que já está instalado no python

-m site
mostra como o python está instalado

python --help
mostra alguns comandos do python

o shebang é ignorado no windows, funciona apenas no linux e mac

------------------------------------------------------------------------
Módulo OS
faz o python se comunicar com o sistema operacional

import os -> para importar o módulo
help(os) -> no python, para ver as informações do módulo
os.environ -> mostra as variáveis de ambiente
os.getenv("LANG") -> pega uma variável em específico, neste caso a LANG

é possível setar a linguagem manualmente pelo terminal:
set LANG=pt_BR

--------------------------------------------------------------------
criar um ambiente virtual
python -m venv .venv
.venv\Scripts\activate

---------------------
dir /a -> mostra os arquivos do diretório, inclusive os ocultos
----------------------------------
python -m pip install --upgrade pip -> instala melhoria no gerenciador de pacotes
python -m pip install ipython -> instala o pacote ipython
----------------------------------------------------------

bin(numero) -> traz o binário correspondente ao numero
chr(numero) -> mostra o caracter correspondente ao numero
id(numero) -> retorna o identificador único do objeto na memória
dir(int) -> mostra os métodos e atributos disponíveis em um objeto, módulo, classe

------------------------------------------------------------
bytes(texto, "utf-8") -> transforma a string em bytes
list(bytes(texto, "utf-8")) -> retorna uma lista com os bytes do texto, mostrando a posição de cada um na tabela informada

-------------------------------------
.endswitch("a" -> verifica se o texto termina com a)
.startswitch("a" -> verifica se o texto começa com a)
--------------------------------------------------
sorted(texto) -> ordena em ordem crescente / alfabética
reversed(texto) -> ordenam em ordem decrescente

----------------------------------------------------
print("\N{nome do emoji}") -> exibe um emoji, necessário pegar o nome no unicode explorer

-----------------------------------------------------

lista.insert(0, "raul") -> insere o nome raul na posição 0 da lista
head,*body,tail = lista -> atribui as variávies head: primeiro elemento da lista, body: elementos do meio 
da lista, tail: ultimo elemento da lista

-----------------------------------------------------
set -> bastante útil para remover itens duplicados

união de sets:
set1.union(set2) ou set1 | set2

intersecção de sets:
set1.interserction(set2) ou set1 & set2

diferença entre sets:
set1.difference(set2) ou set1 - set2 -> mostra o que tem no set1 e não tem no set2
a ordem de como os sets estão dispostos é importante

diferença simétrica (mostra o que não tem em comum nos sets)
set.symmetric_diference(set2) ou set1 ^ set2
---------------------------------------------------------------
Dicionarios:

dicionario_1.update(dicionario_2) -> adciona as info do dict 2 ao dict 1

dic3 = {**dic, **dic2} -> desempacota os dicionarios em um outro dicionario


-------------------------------------------------------------------------------
Fatiamento de string
string.lstrip(caracter) -> remove todos os caracteres que estão a esquerda

-----------------------------------------------------------------------------------
filesystem:

mkdir -> cria uma pasta
mkdir pasta\pasta_interna -> cria uma pasta interna dentro da pasta
cd -> exibe ou mostra o diretório atual
cd.. -> volta para a pasta anterior ao diretório atual
dir -> lista os arquivos da pasta
type nul > arquivo.txt -> pelo prompt do windows, cria um arquivo vazio

em python:
os.listdir(".") -> lista os arquivos do diretório atual
os.curdir - > se o "." não for o caractere correspondente para ver o diretório atual, dará erro
o correto é utilizar o curdir para evitar isso ficando assim:
os.listdir(os.curdir)

os.mkdir("pasta") -> cria uma pasta
os.makedirs("pasta",exist_ok=True) -> cria a pasta e caso já exista, não dará nenhum erro

path = os.path.join("pasta", "subpasta") - utilizamos dessa forma pois dependendo do sistema operacional
o caminho dos arquivos é separado por "/" ou "\"

os.makedirs(path, exist_ok=True) -> jeito correto de fazer

*****************************************
1º passo
- Criar o caminho
path = os.path.join("pasta", "subpasta")
filepath = os.join.path(path, "arquivo.txt")
*** se a pasta não tiver sido criada, dará erro
-- dessa forma só é criado o caminho para o arquivoa

2º passo
open(filepath, "w").close()
dessa forma o arquivo é criado

3º passo
atribuir a uma variavel o open(filepath)
arquivo = open(filepath)
arquivo = open(filepath, "modulo ("r", "w", "a"))
arquivo.close() -> após utilizar o arquivo, se não as informações não ficam salvas
arquivo. read()  - é preciso abrir o arquivo em modo de leitura antes
******************************************

os.path.basename(filepath) -> mostra o nome do arquivo
os.path.abspath(path) -> mostra o caminho absoluto 

open(filepath).read() -> le o arquivo 
print(open(filepath).read()) -> exibe através do print
***************************************************
CONTEXT MANAGER:
 - através da palavra with
 with open(filepath, "a") as arquivo:

**********************************************************
Biblioteca Pathlib

Path("pasta") -> retorna WindowsPath('pasta1')

path = Path("pasta") -> caminho da pasta
path/"nome_arquivo.txt" -> caminho para um arquivo

path / "outrapasta" -> cria um caminho para outra pasta
(path / "outrapasta").mkdir() -> cria a pasta

filepath.write_text("text") -> escreve no arquivo
filepath.read_text() -> le o arquivo